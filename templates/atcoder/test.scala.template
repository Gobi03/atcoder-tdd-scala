package {{CATEGORY_PACKAGE}}

import java.util.Scanner

import common.helpers.{mockScanner, runCustomTest}
import org.scalatest.FunSpec
import org.scalatest.concurrent.TimeLimitedTests
import org.scalatest.time.SpanSugar._

/*
  // script for getting inputs and outputs from the task pages of the AtCoder.
  (function() {
    var selector = 'span.lang-en div.div-btn-copy + pre';
    var i = document.createElement('input');
    i.value = JSON.stringify(Array.from(document.querySelectorAll(selector)).map(e => e.innerText).reduce((acc, v, i) => { let j = Math.floor(i / 2); if (!acc[j]) acc[j] = []; acc[j].push(v.trim().replace(/\n/g, '\\n')); return acc }, []));
    document.body.append(i); document.querySelector('body > input:last-child').select();
    if (document.execCommand('copy')) { document.querySelector('body > input:last-child').remove(); alert('copied to clipboard.\n' + i.value); }
  })();
*/

/**
  * Run the command below in your terminal for the continual TDD experience.
  * export LOCAL_DEBUG=1 && sbt "~testOnly *{{CATEGORY_PACKAGE}}.{{TEST_CLASS}}"
  * Or only the specific test case.
  * export LOCAL_DEBUG=1 && sbt "~testOnly *{{CATEGORY_PACKAGE}}.{{TEST_CLASS}} -- -z {{FIRST_TASK_NAME}}"
  */
class {{TEST_CLASS}} extends FunSpec with TimeLimitedTests {
  val timeLimit = 2000 millis

  {{DESCRIBES}}

  def testWrapper(task: String, solver: Scanner => String, json: String, customParams: List[(String, String)]): Unit = {
    def test(description: String, input: String, output: String): Unit =
      it(description) {
        println(s"${this.suiteName}__${task}__$description")
        assert(solver(mockScanner(input)) === output)
      }

    runCustomTest(test, json, customParams)
  }
}
